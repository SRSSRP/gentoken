<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="3d37480f-887a-460e-9919-4fa1d9b1a9af" created="3.41.1" activeEnvironment="Default environment" name="GenerateToken_Project" updated="3.10.0 2021-09-14T15:18:10Z" encryptionMode="Not encrypted" resourceRoot="${projectDir}" projectVersion="" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:RestService" id="c206e29e-6ae2-4641-a13b-6a67139e0d41" name="Token Generation" type="rest_ex" wadlVersion="https://swagger.io/openapiv3/specification" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart="Shopping.json">
      <con:part>
        <con:url>Shopping.json</con:url>
        <con:content>{"openapi":"3.0.1","info":{"title":"Shopping","version":"1.0.0"},"servers":[{"url":"/"}],"paths":{"":{"get":{"responses":{"default":{"description":"Default response"}}}},"/api/authaccount/registration":{"post":{"requestBody":{"content":{"application/json":{"example":"{\n\n            \"name\":\"Smruti34111\",\n            \"email\":\"patro.smruti24@gmail.com\",\n            \"password\":123456\n}"}}},"responses":{"default":{"description":"Default response"}}}},"/api/authaccount/login":{"description":"","post":{"description":"","requestBody":{"content":{"application/json":{"example":"{\n\t\"email\":\"patro.smruti24@gmail.com\",\n\t\"password\":123456\n}"}}},"responses":{"default":{"description":"Default response"}}}}}}</con:content>
        <con:type>https://swagger.io/openapiv3/specification</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://restapi.adequateshop.com/api/users/</con:endpoint>
      <con:endpoint>http://restapi.adequateshop.com/api/users/</con:endpoint>
      <con:endpoint>http://restapi.adequateshop.com/api/users/174762</con:endpoint>
      <con:endpoint>http://restapi.adequateshop.com/api/users/[${#TestCase#Id}]</con:endpoint>
    </con:endpoints>
    <con:resource name="User Creation" path="/api/authaccount/registration" id="2705d4b7-e5ef-43b5-b4b2-884c08fb7ddc">
      <con:settings/>
      <con:parameters/>
      <con:method name="Method 1" id="e26b4649-dd20-4c3b-a00e-c7a474182bc7" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" id="851e8c28-18eb-42c3-9693-edd4da3334a6" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://restapi.adequateshop.com</con:endpoint>
          <con:request>{

            "name":"Smruti34111",
            "email":"patro.smruti24@gmail.com",
            "password":123456
}</con:request>
          <con:originalUri>http://restapi.adequateshop.com/api/authaccount/registration</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Login" path="/api/authaccount/login" id="486b45b9-387a-4009-a0e4-698ef07acf6a">
      <con:settings/>
      <con:parameters/>
      <con:method name="Method 1" id="e26b4649-dd20-4c3b-a00e-c7a474182bc7" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" id="851e8c28-18eb-42c3-9693-edd4da3334a6" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://restapi.adequateshop.com</con:endpoint>
          <con:request>{
	"email":"patro.smruti24@gmail.com",
	"password":123456
}</con:request>
          <con:originalUri>http://restapi.adequateshop.com/api/authaccount/registration</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Search User" path="" id="b1bc1b0a-5c77-4177-a56c-4ab95ddacd07">
      <con:settings/>
      <con:parameters/>
      <con:method name="Method 2" id="6eca7b1f-2942-4808-af77-8bd0e30d0abd" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" id="31b5109d-0c77-498f-bb3e-77e6f7c509dd" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="Authorization" value="bearer a8a3b2ea-b023-4dba-aa40-00daa7daf706" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>http://restapi.adequateshop.com/api/users/</con:endpoint>
          <con:request/>
          <con:originalUri>http://restapi.adequateshop.com/api/users</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:testSuite id="73454808-1c9b-44f0-a651-53d351e08c76" name="UserCreation&amp;LoginSuite">
    <con:settings/>
    <con:savedRecentRuns>1</con:savedRecentRuns>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="15ae81a3-4e28-41cc-adc0-eda0ba30d54e" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="TC1-UserCreationLogin&amp;GetUserDetails" searchProperties="true" timeout="0">
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="restrequest" name="User creation" id="92000daa-0f4c-4003-a579-62fbbe863306">
        <con:settings/>
        <con:config service="Token Generation" resourcePath="/api/authaccount/registration" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="User creation" id="851e8c28-18eb-42c3-9693-edd4da3334a6" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://restapi.adequateshop.com</con:endpoint>
            <con:request>{

           "name":"${#TestCase#Name}",
            "email":"${#TestCase#Email}",
            "password": "${#Project#userpassword}"
}</con:request>
            <con:originalUri>http://restapi.adequateshop.com/api/authaccount/registration</con:originalUri>
            <con:assertion type="Valid HTTP Status Codes" id="c40a3ee4-d5a8-49c8-84b9-d830e97d1a1c" name="Valid HTTP Status Codes">
              <con:settings/>
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="4bb56419-75fe-4a61-9e83-536ce83601fe" name="Script Assertion">
              <con:configuration>
                <scriptText>def error= " "
def Name = context.expand( '${TC - User creation#Response#$[\'data\'][\'Name\']}' )
log.info Name
def ExpName = context.expand('${#TestCase#Name}')
log.info ExpName
if ( Name == ExpName)
{
	error = error + " "
}

else  error = error + " failed" 

def Email = context.expand( '${TC - User creation#Response#$[\'data\'][\'Email\']}' )
log.info Email
def ExpEmail = context.expand('${#TestCase#Email}')
log.info ExpEmail
if ( Email == ExpEmail)
{
	error = error + " "
}

else  error = error + " failed"</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="a7b448c9-bff3-43c3-949c-255508028e36" name="Script Assertion 2">
              <con:configuration>
                <scriptText>import groovy.json.JsonSlurper

def ResponseMessage = messageExchange.response.responseContent
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
def id = jsonSlurper.data.Id.toString()
log.info id

context.testCase.setPropertyValue("Id", id)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="37ea45fd-3b94-4a6f-8001-a3ec4da051e7" name="Contains">
              <con:configuration>
                <token>success</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple NotContains" id="2bce0696-6975-4f4a-9bbc-cb7fc9d32249" name="Not Contains">
              <con:configuration>
                <token>fail</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Login" id="935a0304-364f-49a7-843a-3523744df44c">
        <con:settings/>
        <con:config service="Token Generation" resourcePath="/api/authaccount/login" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Login" id="851e8c28-18eb-42c3-9693-edd4da3334a6" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://restapi.adequateshop.com</con:endpoint>
            <con:request>{\r
   "email" : "${#TestCase#Email}",\r
   "password" : "${#Project#userpassword}"\r
}</con:request>
            <con:originalUri>http://restapi.adequateshop.com/api/authaccount/registration</con:originalUri>
            <con:assertion type="Valid HTTP Status Codes" id="790d9238-d660-4484-949c-39e5d2ba4f75" name="Valid HTTP Status Codes">
              <con:settings/>
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="457cdf5f-254c-41f8-b684-1724df0fe85e" name="Script Assertion">
              <con:configuration>
                <scriptText>import groovy.json.JsonSlurper

def ResponseMessage = messageExchange.response.responseContent
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)
def token = jsonSlurper.data.Token
assert  token!=null
log.info token

//context.testCase.setPropertyValue("Token", token)
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue("Token", token)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Get Number Of User By Page" id="f03515bc-2fdd-4c8e-a75d-7d8fe5156b34">
        <con:settings/>
        <con:config service="Token Generation" resourcePath="" methodName="Method 2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Get Number Of User By Page" id="31b5109d-0c77-498f-bb3e-77e6f7c509dd" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="bearer ${#Global#Token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>http://restapi.adequateshop.com/api/users/</con:endpoint>
            <con:request/>
            <con:originalUri>http://restapi.adequateshop.com/api/users</con:originalUri>
            <con:assertion type="Valid HTTP Status Codes" id="fdab0b80-1f06-4b58-9486-fb507f13001a" name="Valid HTTP Status Codes">
              <con:settings/>
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            <con:assertion type="JsonPath Count" id="f4fcaf9b-c3bf-4ec7-aeab-daf1074a8f91" name="JSONPath Count">
              <con:configuration>
                <path>data</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="JsonPath Existence Match" id="60a5b3d0-7061-4fbd-9cd0-81f5f1393fa9" name="JSONPath Existence Match">
              <con:configuration>
                <path>data[1].id</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="9aef099e-4ae3-4c05-8639-2672c03d8f86" name="Script Assertion">
              <con:configuration>
                <scriptText>def error = context.expand( '${errorMsg}');
//def error =" "
def total_pages = context.expand( '${REST Request#Response#$[\'total_pages\']}' )
def exp_total_pages= 1722

def total_record = context.expand( '${REST Request#Response#$[\'totalrecord\']}' )
def exp_total_record= 17217


if (total_pages=1722)
{
	error = error + " "
}

else error = error + "orging not matching"

if (total_record=17217)
{
	error = error + " "
}

else error = error + "orging not matching"
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('errorMsg',error);
String errorMessage = context.expand( '${errorMsg}').toUpperCase()
log.info errorMessage</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Get User By UserId" id="06346b02-17b0-4e07-9743-098f22879830">
        <con:settings/>
        <con:config service="Token Generation" resourcePath="" methodName="Method 2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Get User By UserId" id="31b5109d-0c77-498f-bb3e-77e6f7c509dd" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="bearer ${#Global#Token}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>http://restapi.adequateshop.com/api/users/${#TestCase#Id}</con:endpoint>
            <con:request/>
            <con:originalUri>http://restapi.adequateshop.com/api/users</con:originalUri>
            <con:assertion type="Valid HTTP Status Codes" id="fdab0b80-1f06-4b58-9486-fb507f13001a" name="Valid HTTP Status Codes">
              <con:settings/>
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            <con:assertion type="JsonPath Count" id="f4fcaf9b-c3bf-4ec7-aeab-daf1074a8f91" name="JSONPath Count">
              <con:configuration>
                <path>{}</path>
                <content>0</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="JsonPath Existence Match" id="60a5b3d0-7061-4fbd-9cd0-81f5f1393fa9" name="JSONPath Existence Match">
              <con:configuration>
                <path/>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="9aef099e-4ae3-4c05-8639-2672c03d8f86" name="Script Assertion">
              <con:configuration>
                <scriptText>def error =" "
def ResponseIDValue = context.expand( '${Get User by userid#Response#$[\'id\']}' )
log.info ResponseIDValue
def ResponseNameValue = context.expand( '${Get User by userid#Response#$[\'name\']}' )
log.info ResponseNameValue
def ResponseEmailValue = context.expand( '${Get User by userid#Response#$[\'email\']}' )
log.info ResponseEmailValue

def ExpName = context.expand('${#TestCase#Name}')
log.info ExpName
def ExpEmail = context.expand('${#TestCase#Email}')
log.info ExpEmail</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:setupScript>import org.apache.commons.lang.RandomStringUtils

sleep 1000
java.util.Date today = new java.util.Date();
java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("MMddhhmmSSS");
//java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("YYYY-MM-ddThh:mm:ss");
String a = sdf.format(today);
String name = "test" + a
testRunner.testCase.setPropertyValue("Name", name)
log.info "Name:"+name
String email = "test" + a +  "@gmail.com"
testRunner.testCase.setPropertyValue("Email", email)
log.info "Email:"+email</con:setupScript>
      <con:tearDownScript>// Setting the TestCase Status (Pass/Fail) in TestCase level property
String testCaseStatus=context.testRunner.getStatus().toString()
log.info "TestCase STatus is:"+testCaseStatus
context.testCase.setPropertyValue("Passed",testCaseStatus)</con:tearDownScript>
      <con:properties>
        <con:property>
          <con:name>Name</con:name>
          <con:value>test05231037953</con:value>
        </con:property>
        <con:property>
          <con:name>Email</con:name>
          <con:value>test05231037953@gmail.com</con:value>
        </con:property>
        <con:property>
          <con:name>Token</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>Id</con:name>
          <con:value>233412</con:value>
        </con:property>
        <con:property>
          <con:name>Passed</con:name>
          <con:value>PASS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase id="ddcd87fd-4c69-4a5a-b5e1-4f3198518ec2" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="TC2- CreateUsersFromExcelData" searchProperties="true" timeout="0">
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="restrequest" name="Read Data And Create User" id="68975452-04a9-47c8-8901-69a14e11847d">
        <con:settings/>
        <con:config service="Token Generation" resourcePath="/api/authaccount/registration" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Read Data And Create User" id="851e8c28-18eb-42c3-9693-edd4da3334a6" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://restapi.adequateshop.com</con:endpoint>
            <con:request>{\r
   "name" : "${#TestCase#Value [1]}",\r
   "email" : "${#TestCase#Value [2]}",\r
   "password" : "${#TestCase#Value [3]}"\r
}</con:request>
            <con:originalUri>http://restapi.adequateshop.com/api/authaccount/registration</con:originalUri>
            <con:assertion type="Valid HTTP Status Codes" id="06d9a328-8f4b-42c3-b263-4898655568c0" name="Valid HTTP Status Codes">
              <con:settings/>
              <con:configuration>
                <codes>200</codes>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Create Multiple Users Taking Input From Excel Data" id="c6d9a00e-1143-48a8-933f-95504f3a1dfc">
        <con:settings/>
        <con:config>
          <script>import jxl.*

//Workbook wb=Workbook.getWorkbook (new File("C:\\Users\\ajain514\\Downloads\\Demo.xls"));
Workbook wb=Workbook.getWorkbook (new File("C:\\Users\\spatro24\\OneDrive - DXC Production\\Desktop\\Token Project Final\\user.xls"));
Sheet s=wb.getSheet (0)
rc=s.getRows()
log.info ("rows count: "+rc)
cc=s.getColumns()
log.info ("column count: "+ cc)
     String TestData=""
def arr = new String[cc]

for (def i=1;i&lt;rc;i++)
{ 

	TestData=""
log.info i
       for (def j=1;j&lt;cc-1;j++)
          {
          	//log.info j
             Cell c1 = s.getCell(j,i)
             arr [j]=c1.getContents()+"|"
             log.info ("Value in array: "+arr[j])
            TestData=TestData+arr [j]
            testRunner.testCase.setPropertyValue("Value ["+j+"]",arr[j])
           
            }

            def finalTestData= TestData.substring(0, TestData.length() - 1)
            log.info finalTestData
              testRunner.testCase.setPropertyValue("Test_Data"+i+"",finalTestData)
            
    testRunner.runTestStepByName("Read Data And Create User")

    //Get the Status code
  def  reqResponse = testRunner.testCase.testSteps['Read Data And Create User'].testRequest.response.getResponseHeaders()
    String  httpStatus=reqResponse["#status#"]
    log.info httpStatus
     testRunner.testCase.setPropertyValue("Test_Data_Response"+i+"",httpStatus)
     //Getting WriteToExcel Class Object to use its methods and Update the Response in the TestData Excel Sheet
def myObj1=context.WriteToExcel
myObj1.writeResponseToExcel(i,4,httpStatus)
     
}</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import jxl.*

//This is to Cal WriteResponseToExcel ReusableScript
testRunner.testCase.testSuite.project.getTestSuiteByName("ScriptLibrary").getTestCaseByName("Reusable_TestSteps").getTestStepByName("WriteResponseToExcel").run(testRunner,context)

//Reset the Response as null in the TestData Excel Sheet
//Workbook wb=Workbook.getWorkbook (new File("C:\\Users\\ajain514\\Downloads\\Demo.xls"));
Workbook wb=Workbook.getWorkbook (new File("C:\\Users\\spatro24\\OneDrive - DXC Production\\Desktop\\Token Project Final\\user.xls"));
Sheet s=wb.getSheet (0)
rc=s.getRows()
log.info ("rows count: "+rc)
for (def i=1;i&lt;rc;i++)
{
     //Getting WriteToExcel Class Object to use its methods and Update the Response in the TestData Excel Sheet
def myObj1=context.WriteToExcel
myObj1.writeResponseToExcel(i,4,"")
}</con:setupScript>
      <con:tearDownScript>// Setting the TestCase Status (Pass/Fail) in TestCase level property
String testCaseStatus=context.testRunner.getStatus().toString()
log.info "TestCase STatus is:"+testCaseStatus
context.testCase.setPropertyValue("Passed",testCaseStatus)</con:tearDownScript>
      <con:properties>
        <con:property>
          <con:name>Test_Data1</con:name>
          <con:value>test1excelpl597011|test1excelsample202@email.com597011|123456</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data2</con:name>
          <con:value>test1excelpl597022|test1excelsample202@email.com597022|123456</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data3</con:name>
          <con:value>test1excelpl597033|test1excelsample202@email.com597033|123456</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data4</con:name>
          <con:value>test1excelpl597044|test1excelsample202@email.com597044|123456</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data5</con:name>
          <con:value>test1excelpl597055|test1excelsample202@email.com597055|123456</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data6</con:name>
          <con:value>test1excelpl597066|test1excelsample202@email.com597066|123456</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data7</con:name>
          <con:value>test1excelpl597077|test1excelsample202@email.com597077|123456</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data8</con:name>
          <con:value>test1excelpl597088|test1excelsample202@email.com597088|123456</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data9</con:name>
          <con:value>test1excelpl597099|test1excelsample202@email.com597099|123456</con:value>
        </con:property>
        <con:property>
          <con:name>Value [1]</con:name>
          <con:value>test1excelpl597099|</con:value>
        </con:property>
        <con:property>
          <con:name>Value [2]</con:name>
          <con:value>test1excelsample202@email.com597099|</con:value>
        </con:property>
        <con:property>
          <con:name>Value [3]</con:name>
          <con:value>123456|</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data_Response1</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data_Response2</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data_Response3</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data_Response4</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data_Response5</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data_Response6</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data_Response7</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data_Response8</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>Test_Data_Response9</con:name>
          <con:value>[HTTP/1.1 200 OK]</con:value>
        </con:property>
        <con:property>
          <con:name>Passed</con:name>
          <con:value>PASS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:properties/>
    <con:setupScript>log.info runner.testSuite.getClass()</con:setupScript>
    <con:tearDownScript>//Rerun failed test cases X amount of times based off the number set in the RerunCount test suite property
def reRunCount = 2
def failTestSuite = false
for ( testCaseResult in runner.results ) {
  if ( testCaseResult.getStatus().toString() == 'FAIL' ){
    def tRun
    for (i = 0; i &lt; reRunCount; i++) {
      tRun = testCaseResult.testCase.run(null, false) //Need to have "true" as the second argument
      log.info("Re-Run..."+i +"   :  "+ testCaseResult.getTestCase().name)
     
      if(tRun.getStatus().toString() == "PASS"){
        runner.status = Status.FINISHED //Change test suite status to PASS
        break;
      }
    }
   
    if(tRun.getStatus().toString() == "FAILED")
    {
      failTestSuite = true //If a test case is still failed after reruns, set the flag to fail the test suite and exit the loop
    }
  }
}

if(failTestSuite)
{
  runner.status = Status.FAILED //Change the test suite status to failed if the flag is set to fail the test suite
}</con:tearDownScript>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite id="6d62ca85-2425-4c1f-8b19-f4febee2993f" name="ScriptLibrary" disabled="true">
    <con:settings/>
    <con:savedRecentRuns>1</con:savedRecentRuns>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="4c51a9f2-29c6-4726-ba16-5842a61b0d50" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="EmailGenerationTC" searchProperties="true" timeout="0">
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="groovy" name="Groovy Script" id="9596169c-2dcf-4daf-a1d8-bcf230e215cd">
        <con:settings/>
        <con:config>
          <script><![CDATA[import org.apache.poi.ss.usermodel.DataFormatter;
import java.util.Properties;
import org.apache.poi.hssf.usermodel.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.regex.Pattern;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;
import java.util.TreeMap;
//import com.co.jairframe.business.JCOBNativeHost.JCOBNativeHost;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.util.regex.Matcher;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.CellReference;
def cellDataFormatter = new HSSFDataFormatter()

//import jakarta.mail.Folder;
//import jakarta.mail.MessagingException;
//import jakarta.mail.Session;
//import jakarta.mail.Store;

import jakarta.mail.*;
import jakarta.mail.BodyPart;
import jakarta.mail.Folder;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Multipart;
import jakarta.mail.Session;
import jakarta.mail.Store;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import jakarta.mail.internet.MimeMultipart
import jakarta.mail.internet.MimeBodyPart
import jakarta.activation.DataHandler
import jakarta.mail.Transport


int passCount = 0;
int failCount = 0;
int totalCount = 0;

StringBuilder html = new StringBuilder();
StringBuilder htmlTableForCount = new StringBuilder();

File file = new File(System.getProperty("user.dir")+"/GenerateTokenReport.html");
String TC_status

int testSuiteCount = testRunner.testCase.testSuite.project.getTestSuiteCount()
log.info(testSuiteCount)
TestSuiteCountloop:
 for (int i = 0; i <= testSuiteCount - 1; i++) {
//  log.info("testsuite****************************")
  int testCaseCount = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseCount()
  String testSuiteName = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getLabel()
  log.info(testSuiteName)
  if (!testSuiteName.contains("disabled")) {
//   log.info("******************Not disabled suite")
   TestCaseCountloop:
   for (int j = 0; j <= testCaseCount - 1; j++) {
    String testCaseName = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseAt(j).getLabel()
    log.info(testCaseName)
    log.info(j)
     if (!testCaseName.contains("disabled")) {
     	   log.info("******************Not disabled Case"+"i="+i+",j="+j)
    String status = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseAt(j).getPropertyValue('Passed')
     log.info("status"+status)

    if (status.equalsIgnoreCase("Pass")) {
//     log.info("status"+status)
     TC_status = "Pass"

     passCount = passCount + 1;
     totalCount = totalCount + 1;
    } else {
     TC_status = "Fail"

     failCount = failCount + 1;
     totalCount = totalCount + 1;
    }
   }
   else{
//   	 log.info("******************Disabled case-EmailGen")
      continue TestCaseCountloop;
   }
   }
  } else {
//   log.info("******************Disabled suite-EmailGen")
   continue TestSuiteCountloop;
  }
 }



DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");//HH:mm:ss
Calendar cal = Calendar.getInstance();

html.append("<html>\n");
html.append("<head>\n");
html.append("</head>\n");
html.append("<body bgcolor=#E6E6FA>\n");
html.append("<table border=\"1\">\n");
html.append("<tr bgcolor=#A9A9A9>\n");
html.append("<th width=\"30%\">Test Environment</th>\n");
html.append("<th width=\"10%\">Start Time</th>\n");
html.append("<th width=\"10%\">Finish Time</th>\n");
html.append("<th width=\"10%\">Total Executed</th>\n");
html.append("<th width=\"10%\">Passed</th>\n");
html.append("<th width=\"10%\">Failed</th>\n");

FileInputStream fis;
String env = "QA  "
String startTime = com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("startTime")
String endTime = com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("endTime")
html.append("</tr>\n");
html.append("<tr bgcolor=#E6E6FA>\n");
html.append("<td style=text-align:center>" + env + "</td>\n");
html.append("<td style=text-align:center>" + startTime + "</td>\n");
html.append("<td style=text-align:center>" + endTime + "</td>\n");
html.append("<td style=text-align:center>" + totalCount + "</td>\n");
html.append("<td style=text-align:left>" + passCount + "</td>\n");
html.append("<td style=text-align:left>" + failCount + "</td>\n");

bw1 = new BufferedWriter(new FileWriter(file));
html.append("</table>\n");
html.append("</body>\n");
html.append("</html>\n");
bw1.write(html.toString());
bw1.flush();
bw1.close();

html.append("<body bgcolor=#E6E6FA>\n");
html.append("<table border=\"1\">\n");
html.append("<tr bgcolor=#A9A9A9>\n");
html.append("<th width=\"2%\">Sno</th>\n");
html.append("<th width=\"8%\">Version</th>\n");
html.append("<th width=\"25%\">TestSuiteName</th>\n");
html.append("<th width=\"35%\">TestCaseName</th>\n");
html.append("<th width=\"2%\">Result</th>\n");
html.append("<th width=\"30%\">Remarks</th>");

//FileInputStream fs;

html.append("</tr>\n");
int sno =1;
TestSuitePrintloop:
 for (int i = 0; i <= testSuiteCount - 1; i++) {
//  log.info("testsuite----------------------1")
  int testCaseCount = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseCount()
  String testSuiteName = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getLabel()
  log.info(testSuiteName)
  if (!testSuiteName.contains("disabled")) {
 TestCasePrintloop:
   for (int j = 0; j <= testCaseCount - 1; j++) {
    String testCaseName = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseAt(j).getLabel()
    log.info(testCaseName)
	if (!testCaseName.contains("disabled")) {
		

String remarks = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseAt(j).getPropertyValue('ErrorMsg')
		if (remarks != null) 
	{
			log.info(remarks)
		} else 
	{			
			remarks = ""
		}

    String status = testRunner.testCase.testSuite.project.getTestSuiteAt(i).getTestCaseAt(j).getPropertyValue('Passed')
    log.info(status)

    if(status.equalsIgnoreCase("Pass")){
     TC_status = "Pass"
     passCount = passCount + 1;
     totalCount = totalCount + 1;
    } else {
     TC_status = "Fail"
     failCount = failCount + 1;
     totalCount = totalCount + 1;
    }

    String version = "3.10.1"
    html.append("<tr bgcolor=#E6E6FA>\n");
    html.append("<td style=text-align:center>" + (sno++) + "</td>\n");
    html.append("<td style=text-align:center>" + version + "</td>\n");
    html.append("<td style=text-align:center>" + testSuiteName + "</td>\n");
    html.append("<td style=text-align:left>" + testCaseName + "</td>\n");

    if (TC_status.equals("Pass")) {
     html.append("<td style=text-align:center bgcolor=#008000>" + TC_status + "</td>\n");
    } else {
     html.append("<td style=text-align:center bgcolor=#FF0000>" + TC_status + "</td>\n");
    }


    html.append("<td style=text-align:center>" + remarks + "</td>\n");
    html.append("</tr>\n");
	}
	else{
//   	 log.info("******************Disabled case")
     continue TestCasePrintloop;
  }
      
   }
  } 
  else {
   log.info("******************Disabled suite")
   continue TestSuitePrintloop;
  }

 }

html.append("</table>\n");
html.append("</body>\n");
html.append("</html>\n");

BufferedWriter bw = new BufferedWriter(new FileWriter(file));

StringBuilder st = new StringBuilder(html);
bw.write(st.toString());
bw.flush();
bw.close();

Properties newprops = new Properties();

newprops.put("mail.smtp.host", "smtphqs.coair.com");
newprops.setProperty("mail.port", "25");

Multipart multipart = new MimeMultipart();

session = Session.getInstance(newprops,
 new jakarta.mail.Authenticator() {
  protected PasswordAuthentication getPasswordAuthentication() {
   return new PasswordAuthentication(props.getProperty("email_UserName"), props.getProperty("email_Password"));
  }
 });

MimeMessage message = new MimeMessage(session);

BodyPart htmlBodyPart = new MimeBodyPart();
String contentMessage = new StringBuffer(html.toString());
htmlBodyPart.setContent(contentMessage, "text/html");


multipart.addBodyPart(htmlBodyPart);

message.setContent(multipart);

def mailFrom = com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("mailFrom")
def mailTo = com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("mailTo")
def mailCC = com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("mailCC")
log.info mailTo

message.setFrom(new InternetAddress(mailFrom));
message.setRecipients(Message.RecipientType.TO, mailTo);
message.setRecipients(Message.RecipientType.CC, mailCC);

message.setSubject("Generate_Token Project "+endTime);
Transport.send(message);
Thread.sleep(500);
log.info("mail sent")]]></script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>// Setting the TestCase Status (Pass/Fail) in TestCase level property
String testCaseStatus=context.testRunner.getStatus().toString()
log.info "TestCase STatus is:"+testCaseStatus
context.testCase.setPropertyValue("Passed",testCaseStatus)</con:tearDownScript>
      <con:properties>
        <con:property>
          <con:name>Passed</con:name>
          <con:value>PASS</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase id="9616151d-abb7-482c-89a2-06a96c399cac" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Reusable_TestSteps" searchProperties="true" timeout="0">
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="groovy" name="WriteResponseToExcel" id="a1574b98-428b-4489-a272-2d50c7e71bb2">
        <con:settings/>
        <con:config>
          <script>import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;


class WriteToExcel {
  def log
  def context
  def testRunner

  //Constructor to initialize the class
  def WriteToExcel(log, testRunner, context) {
    this.log = log
    this.context = context
    this.testRunner = testRunner
  }
 def writeResponseToExcel(int rowNumber,int cellNumber,String valueToBeUpdated) {
 	
String excelFilePath = "C:\\Users\\spatro24\\OneDrive - DXC Production\\Desktop\\Token Project Final\\user.xls";
try
{
FileInputStream inputStream = new FileInputStream(new File(excelFilePath));
            Workbook workbook = WorkbookFactory.create(inputStream);
            Sheet sheet = workbook.getSheetAt(0);
Cell cell2Update = sheet.getRow(rowNumber).getCell(cellNumber);
cell2Update.setCellValue((String)valueToBeUpdated);
inputStream.close();
            FileOutputStream outputStream = new FileOutputStream("C:\\Users\\spatro24\\OneDrive - DXC Production\\Desktop\\Token Project Final\\user.xls");
            workbook.write(outputStream);
            workbook.close();
            outputStream.close();
            log.info "Data is updated  in Excel successfully"

}
catch (IOException | EncryptedDocumentException
                | InvalidFormatException ex) {
            ex.printStackTrace();
             log.info "Error in Updated Data in Excel"
        }
 }
}
context.setProperty("WriteToExcel", new WriteToExcel(log, testRunner, context))</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>// Setting the TestCase Status (Pass/Fail) in TestCase level property
String testCaseStatus=context.testRunner.getStatus().toString()
log.info "TestCase STatus is:"+testCaseStatus
context.testCase.setPropertyValue("Passed",testCaseStatus)</con:tearDownScript>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase id="6f6f05f7-5f1b-4123-bbda-86775014def7" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="GlobalPropertyTC" searchProperties="true" timeout="0">
      <con:settings/>
      <con:savedRecentRuns>1</con:savedRecentRuns>
      <con:testStep type="groovy" name="GlobalPropertySetup" id="48799b0f-1232-443a-ba5f-a8d8618e8009">
        <con:settings/>
        <con:config>
          <script>//Environment global property setup
def Environment = "QA"
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('EnvironmentName',Environment);
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('Environment',Environment);
def EnvironmentName = com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("EnvironmentName")
log.info("Environment:" + EnvironmentName)
//ServiceName global property setup
def ServiceName = 'ALL'
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('ServiceName',ServiceName);
log.info(com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("ServiceName"))


def mailFrom = 'smruti.patro@united.com'
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('mailFrom',mailFrom);
def mailFromprint = com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("mailFrom")
log.info(mailFromprint)

def mailTo ='smruti.patro@united.com'

com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('mailTo',mailTo);
def mailToprint = com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("mailTo")
log.info(mailToprint)
def mailCC = 'smruti.patro@united.com'


com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('mailCC',mailCC);
def mailCCprint = com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.getPropertyValue("mailCC")
log.info(mailCCprint)</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>// Setting the TestCase Status (Pass/Fail) in TestCase level property
String testCaseStatus=context.testRunner.getStatus().toString()
log.info "TestCase STatus is:"+testCaseStatus
context.testCase.setPropertyValue("Passed",testCaseStatus)</con:tearDownScript>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:requirements/>
  <con:properties>
    <con:property userSpecific="true">
      <con:name>userpassword</con:name>
      <con:value>123456</con:value>
    </con:property>
    <con:property>
      <con:name>Value [1]</con:name>
      <con:value>http://restapi.adequateshop.com</con:value>
    </con:property>
    <con:property>
      <con:name>Value [2]</con:name>
      <con:value>account/registration</con:value>
    </con:property>
    <con:property>
      <con:name>Value [3]</con:name>
      <con:value>/api/authaccount/login</con:value>
    </con:property>
    <con:property>
      <con:name>Value [4]</con:name>
      <con:value>http://restapi.adequateshop.com/api/users/</con:value>
    </con:property>
    <con:property>
      <con:name>Value [5]</con:name>
      <con:value>http://restapi.adequateshop.com/api/users/${#TestCase#Id}</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:jmsConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:reportTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:parameters/>
    <con:parameters/>
  </con:reporting>
  <con:reporting/>
  <con:beforeRunScript>def pswd1 = "123456"
project.setPropertyValue("userpassword",pswd1)
log.info pswd1

//TimeZone
TimeZone.getTimeZone('UTC')
Date date= new Date()
String startTime=date.format("YYYY-MM-dd'T'HH:mm:ss")
String startTime1=date.format("YYYY-MM-dd HH:mm:ss")
log.info "startTime" + startTime
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('startTime',startTime);
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('startTime1',startTime1);</con:beforeRunScript>
  <con:afterRunScript>Date date= new Date()
String endTime=date.format("YYYY-MM-dd'T'HH:mm:ss")
String endTime1=date.format("YYYY-MM-dd HH:mm:ss")
log.info "endTime" + endTime
com.eviware.soapui.model.propertyexpansion.PropertyExpansionUtils.globalProperties.setPropertyValue('endTime',endTime);
//To run Email Reporting Script to send the status of TestCases Execution
 def  emailReportingTC = runner.project.getTestSuiteByName("ScriptLibrary").getTestCaseByName("EmailGenerationTC")
 def properties = new com.eviware.soapui.support.types.StringToObjectMap ()
 emailReportingTC.run(properties,true)</con:afterRunScript>
  <con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest">
    <con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to ReadyAPI functional tests

// If hardcoding the token, uncomment and change line 5
// token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep">
    <con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new java.io.FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new java.io.PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script>
  </con:eventHandlers>
  <con:authRepository/>
  <con:tags/>
</con:soapui-project>
